"""Add group_id to user and reply_relation tables

Revision ID: 301c722df78a
Revises: fd345c53ec5d
Create Date: 2025-07-15 22:24:52.180003

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '301c722df78a'
down_revision: Union[str, Sequence[str], None] = 'fd345c53ec5d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- For 'reply_relations' table ---
    # 1. Add the column with nullable=True temporarily
    op.add_column('reply_relations', sa.Column('group_id', sa.BigInteger(), nullable=True))

    # 2. Update existing rows with a default value (e.g., 0)
    # This ensures no NULL values are present before setting NOT NULL
    op.execute("UPDATE reply_relations SET group_id = 0 WHERE group_id IS NULL")

    # 3. Alter the column to nullable=False
    op.alter_column('reply_relations', 'group_id',
                    existing_type=sa.BigInteger(),
                    nullable=False)

    # Ensure the unique constraint on 'id' is handled correctly.
    # If 'id' is already primary_key=True and unique, this might be redundant or need adjustment
    # based on your model's actual definition.
    # If it's a new unique constraint, it's fine.
    op.create_unique_constraint(None, 'reply_relations', ['id'])

    # --- For 'telegram_users' table ---
    # 1. Add the column with nullable=True temporarily
    op.add_column('telegram_users', sa.Column('group_id', sa.BigInteger(), nullable=True))

    # 2. Update existing rows with a default value (e.g., 0)
    op.execute("UPDATE telegram_users SET group_id = 0 WHERE group_id IS NULL")

    # 3. Alter the column to nullable=False
    op.alter_column('telegram_users', 'group_id',
                    existing_type=sa.BigInteger(),
                    nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('telegram_users', 'group_id')
    # The unique constraint might have a generated name (None).
    # You might need to find its actual name if it causes issues.
    # For now, assuming it's correctly handled by Alembic's autogenerated downgrade.
    op.drop_constraint(None, 'reply_relations', type_='unique')
    op.drop_column('reply_relations', 'group_id')
    # ### end Alembic commands ###